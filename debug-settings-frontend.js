const { createClient } = require('@supabase/supabase-js')
const fs = require('fs')
const path = require('path')

// Carregar vari√°veis de ambiente do .env
function loadEnvFile() {
  const envFiles = ['.env.local', '.env']
  let loaded = false
  
  for (const envFile of envFiles) {
    const envPath = path.join(__dirname, envFile)
    
    if (fs.existsSync(envPath)) {
      const envContent = fs.readFileSync(envPath, 'utf8')
      const lines = envContent.split('\n')
      
      lines.forEach(line => {
        const [key, ...valueParts] = line.split('=')
        if (key && valueParts.length > 0) {
          const value = valueParts.join('=').trim().replace(/^["']|["']$/g, '')
          process.env[key.trim()] = value
        }
      })
      
      loaded = true
      break
    }
  }
}

loadEnvFile()

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const anonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

console.log('üîç DEBUG COMPLETO - SETTINGS E APIs')
console.log('===================================\n')

async function debugComplete() {
  try {
    // 1. Testar conex√£o b√°sica
    console.log('1. üîå TESTANDO CONEX√ÉO B√ÅSICA:')
    const supabase = createClient(supabaseUrl, anonKey)
    
    // Simular usu√°rio logado
    console.log('   - URL Supabase:', supabaseUrl ? '‚úÖ Definida' : '‚ùå N√£o definida')
    console.log('   - Anon Key:', anonKey ? '‚úÖ Definida' : '‚ùå N√£o definida')
    
    // 2. Testar acesso √†s configura√ß√µes (como usu√°rio an√¥nimo)
    console.log('\n2. ‚öôÔ∏è TESTANDO ACESSO √ÄS CONFIGURA√á√ïES:')
    const { data: settingsPublic, error: settingsError } = await supabase
      .from('settings')
      .select('*')
      .limit(5)
    
    if (settingsError) {
      console.log('   ‚ùå Erro com usu√°rio an√¥nimo:', settingsError.message)
      console.log('   üí° Isso √© esperado se RLS estiver ativo')
    } else {
      console.log('   ‚úÖ Acesso p√∫blico √†s configura√ß√µes permitido')
      console.log('   üìä Configura√ß√µes encontradas:', settingsPublic.length)
    }
    
    // 3. Testar com service role
    console.log('\n3. üîë TESTANDO COM SERVICE ROLE:')
    const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY
    if (!serviceRoleKey) {
      console.log('   ‚ùå Service Role Key n√£o encontrada')
      return
    }
    
    const adminSupabase = createClient(supabaseUrl, serviceRoleKey)
    const { data: settingsAdmin, error: adminError } = await adminSupabase
      .from('settings')
      .select('*')
      .order('key')
    
    if (adminError) {
      console.log('   ‚ùå Erro com service role:', adminError.message)
      return
    }
    
    console.log('   ‚úÖ Service role funcionando')
    console.log('   üìä Total de configura√ß√µes:', settingsAdmin.length)
    
    // 4. Simular a categoriza√ß√£o exata do c√≥digo
    console.log('\n4. üè∑Ô∏è SIMULANDO CATEGORIZA√á√ÉO EXATA:')
    
    const categorizedSettings = {
      general: [],
      pricing: [],
      api: [],
      notifications: [],
      security: [],
      system: []
    }

    settingsAdmin.forEach(setting => {
      const key = setting.key.toLowerCase()
      
      // Pular configura√ß√µes que s√£o exibidas na se√ß√£o especial de c√¢mbio
      if (key === 'currency_mode' || key === 'usd_brl_rate' || key === 'markup_percentage') {
        console.log(`   ‚è≠Ô∏è PULANDO (c√¢mbio): ${setting.key}`)
        return // N√£o adicionar nas categorias normais
      }
      
      if (key.includes('deposit') || key.includes('min_') || key.includes('max_') || key.includes('balance') || key.includes('alert')) {
        console.log(`   üí∞ PRICING: ${setting.key}`)
        categorizedSettings.pricing.push(setting)
      } else if (key.includes('api') || key.includes('provider') || key.includes('sync') || key.includes('timeout') || key.includes('monitoring') || key.includes('price')) {
        console.log(`   üîå API: ${setting.key}`)
        categorizedSettings.api.push(setting)
      } else if (key.includes('notification') || key.includes('email') || key.includes('contact') || key.includes('whatsapp')) {
        console.log(`   üîî NOTIFICATIONS: ${setting.key}`)
        categorizedSettings.notifications.push(setting)
      } else if (key.includes('security') || key.includes('auth') || key.includes('password') || key.includes('login') || key.includes('session')) {
        console.log(`   üîí SECURITY: ${setting.key}`)
        categorizedSettings.security.push(setting)
      } else if (key.includes('maintenance') || key.includes('debug') || key.includes('log') || key.includes('test')) {
        console.log(`   ‚öôÔ∏è SYSTEM: ${setting.key}`)
        categorizedSettings.system.push(setting)
      } else {
        console.log(`   üåê GENERAL: ${setting.key}`)
        categorizedSettings.general.push(setting)
      }
    })
    
    console.log('\nüìä RESULTADO DA CATEGORIZA√á√ÉO:')
    console.log('================================')
    console.log(`Total: ${settingsAdmin.length}`)
    console.log(`Geral: ${categorizedSettings.general.length}`)
    console.log(`Pre√ßos & C√¢mbio: ${categorizedSettings.pricing.length}`)
    console.log(`APIs: ${categorizedSettings.api.length}`)
    console.log(`Notifica√ß√µes: ${categorizedSettings.notifications.length}`)
    console.log(`Seguran√ßa: ${categorizedSettings.security.length}`)
    console.log(`Sistema: ${categorizedSettings.system.length}`)
    
    // 5. Testar API Keys (para status MTP/JAP)
    console.log('\n5. üîë TESTANDO STATUS DAS APIs (MTP/JAP):')
    const { data: apiKeys, error: apiError } = await adminSupabase
      .from('api_keys')
      .select('*')
    
    if (apiError) {
      console.log('   ‚ùå Erro ao buscar API keys:', apiError.message)
    } else {
      console.log('   ‚úÖ API keys encontradas:', apiKeys.length)
      apiKeys.forEach(key => {
        console.log(`   - ${key.provider.toUpperCase()}: ${key.is_active ? 'üü¢ Ativa' : 'üî¥ Inativa'}`)
        console.log(`     Key: ${key.api_key.substring(0, 10)}...`)
        console.log(`     √öltimo teste: ${key.last_tested || 'Nunca'}`)
      })
    }
    
    // 6. Verificar se h√° problemas de CORS ou autentica√ß√£o
    console.log('\n6. üåê DIAGN√ìSTICO FINAL:')
    console.log('========================')
    
    if (settingsAdmin.length > 0 && categorizedSettings.general.length === 0 && 
        categorizedSettings.pricing.length === 0 && categorizedSettings.api.length === 0) {
      console.log('‚ùå PROBLEMA: Configura√ß√µes existem mas categoriza√ß√£o falhou')
      console.log('üí° Verifique a l√≥gica de categoriza√ß√£o no frontend')
    } else if (settingsAdmin.length > 0) {
      console.log('‚úÖ BACKEND: Configura√ß√µes e categoriza√ß√£o funcionando')
      console.log('üí° Se frontend mostra 0, pode ser:')
      console.log('   - Problema de autentica√ß√£o no frontend')
      console.log('   - Cache do navegador')
      console.log('   - Erro JavaScript no console')
    } else {
      console.log('‚ùå PROBLEMA: Nenhuma configura√ß√£o encontrada no banco')
    }
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error.message)
  }
}

debugComplete().then(() => {
  console.log('\nüéØ PR√ìXIMOS PASSOS:')
  console.log('==================')
  console.log('1. Verifique o console do navegador (F12) por erros JavaScript')
  console.log('2. Fa√ßa hard refresh: Ctrl+F5 ou Cmd+Shift+R')
  console.log('3. Verifique se o usu√°rio est√° logado corretamente')
  console.log('4. Se ainda n√£o funcionar, h√° problema na verifica√ß√£o de admin no frontend')
}).catch(console.error)
