#!/usr/bin/env node

/**
 * Script para verificar o estado atual do banco de dados
 * Mostra todas as configura√ß√µes e dados existentes
 */

const { createClient } = require('@supabase/supabase-js')

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || "https://xpklpweyvwviuiqzjgwe.supabase.co"
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inhwa2xwd2V5dnd2aXVpcXpqZ3dlIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NTU2NTE3OSwiZXhwIjoyMDcxMTQxMTc5fQ.7adnyvvwEWyAzYXHWyF7n9SEfdTrxZHcKlSKTJ7gQaQ"

const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
})

async function checkDatabase() {
  console.log('üîç AN√ÅLISE COMPLETA DO BANCO DE DADOS')
  console.log('=' .repeat(50))
  
  try {
    // 1. Verificar usu√°rios
    console.log('\nüë• USU√ÅRIOS:')
    const { data: users, error: usersError } = await supabase
      .from('users')
      .select('id, email, full_name, role, balance, status, created_at')
      .order('created_at', { ascending: false })
    
    if (usersError) {
      console.log('‚ùå Erro ao buscar usu√°rios:', usersError.message)
    } else {
      console.log(`üìä Total de usu√°rios: ${users?.length || 0}`)
      if (users && users.length > 0) {
        users.forEach(user => {
          console.log(`   ‚Ä¢ ${user.email} (${user.role}) - Saldo: R$ ${user.balance}`)
        })
      }
    }

    // 2. Verificar chaves de API
    console.log('\nüîë CHAVES DE API:')
    const { data: apiKeys, error: keysError } = await supabase
      .from('api_keys')
      .select('*')
    
    if (keysError) {
      console.log('‚ùå Erro ao buscar chaves:', keysError.message)
    } else {
      console.log(`üìä Total de chaves: ${apiKeys?.length || 0}`)
      if (apiKeys && apiKeys.length > 0) {
        apiKeys.forEach(key => {
          console.log(`   ‚Ä¢ ${key.provider.toUpperCase()}: ${key.api_key.substring(0, 10)}... (${key.is_active ? 'ATIVA' : 'INATIVA'})`)
          if (key.api_url) console.log(`     URL: ${key.api_url}`)
        })
      } else {
        console.log('‚ö†Ô∏è Nenhuma chave de API configurada')
      }
    }

    // 3. Verificar servi√ßos
    console.log('\nüõçÔ∏è SERVI√áOS:')
    const { data: services, error: servicesError } = await supabase
      .from('services')
      .select('id, provider, name, category, rate, status, last_sync')
      .order('created_at', { ascending: false })
      .limit(10)
    
    if (servicesError) {
      console.log('‚ùå Erro ao buscar servi√ßos:', servicesError.message)
    } else {
      const { count: totalServices } = await supabase
        .from('services')
        .select('*', { count: 'exact', head: true })
      
      console.log(`üìä Total de servi√ßos: ${totalServices || 0}`)
      
      if (services && services.length > 0) {
        console.log('üìù √öltimos 10 servi√ßos:')
        services.forEach(service => {
          console.log(`   ‚Ä¢ [${service.provider?.toUpperCase()}] ${service.name} - R$ ${service.rate} (${service.status})`)
          console.log(`     Categoria: ${service.category}`)
          if (service.last_sync) {
            console.log(`     √öltima sync: ${new Date(service.last_sync).toLocaleString('pt-BR')}`)
          }
        })
      } else {
        console.log('‚ö†Ô∏è Nenhum servi√ßo encontrado')
      }
    }

    // 4. Verificar categorias
    console.log('\nüìÇ CATEGORIAS DE SERVI√áOS:')
    const { data: categories } = await supabase
      .from('services')
      .select('category')
      .eq('status', 'active')
    
    if (categories) {
      const uniqueCategories = [...new Set(categories.map(c => c.category).filter(Boolean))]
      console.log(`üìä Total de categorias: ${uniqueCategories.length}`)
      uniqueCategories.slice(0, 10).forEach(cat => {
        console.log(`   ‚Ä¢ ${cat}`)
      })
    }

    // 5. Verificar pedidos
    console.log('\nüì¶ PEDIDOS:')
    const { count: totalOrders } = await supabase
      .from('orders')
      .select('*', { count: 'exact', head: true })
    
    const { count: pendingOrders } = await supabase
      .from('orders')
      .select('*', { count: 'exact', head: true })
      .in('status', ['pending', 'processing', 'in_progress'])
    
    console.log(`üìä Total de pedidos: ${totalOrders || 0}`)
    console.log(`‚è≥ Pedidos pendentes: ${pendingOrders || 0}`)

    // 6. Verificar transa√ß√µes
    console.log('\nüí∞ TRANSA√á√ïES:')
    const { count: totalTransactions } = await supabase
      .from('transactions')
      .select('*', { count: 'exact', head: true })
    
    console.log(`üìä Total de transa√ß√µes: ${totalTransactions || 0}`)

    // 7. Verificar cota√ß√µes
    console.log('\nüí± COTA√á√ïES:')
    const { data: exchangeRates, error: ratesError } = await supabase
      .from('exchange_rates')
      .select('*')
      .order('updated_at', { ascending: false })
      .limit(5)
    
    if (ratesError) {
      console.log('‚ùå Erro ao buscar cota√ß√µes:', ratesError.message)
    } else {
      console.log(`üìä Cota√ß√µes armazenadas: ${exchangeRates?.length || 0}`)
      if (exchangeRates && exchangeRates.length > 0) {
        exchangeRates.forEach(rate => {
          console.log(`   ‚Ä¢ ${rate.currency_pair}: ${rate.rate} (${new Date(rate.updated_at).toLocaleString('pt-BR')})`)
        })
      }
    }

    // 8. Verificar configura√ß√µes
    console.log('\n‚öôÔ∏è CONFIGURA√á√ïES:')
    const { data: settings, error: settingsError } = await supabase
      .from('settings')
      .select('*')
      .order('key')
    
    if (settingsError) {
      console.log('‚ùå Erro ao buscar configura√ß√µes:', settingsError.message)
    } else {
      console.log(`üìä Configura√ß√µes: ${settings?.length || 0}`)
      if (settings && settings.length > 0) {
        settings.forEach(setting => {
          console.log(`   ‚Ä¢ ${setting.key}: ${setting.value}`)
          if (setting.description) {
            console.log(`     ${setting.description}`)
          }
        })
      } else {
        console.log('‚ö†Ô∏è Nenhuma configura√ß√£o encontrada')
      }
    }

    console.log('\nüéâ AN√ÅLISE CONCLU√çDA!')
    console.log('=' .repeat(50))

  } catch (error) {
    console.error('‚ùå Erro na an√°lise:', error.message)
  }
}

// Executar an√°lise
checkDatabase().catch(console.error)
