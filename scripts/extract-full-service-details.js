// Script para extrair TODAS as informa√ß√µes detalhadas dos servi√ßos da API
require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis do Supabase n√£o encontradas');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

// Fun√ß√£o para buscar um servi√ßo espec√≠fico da API para an√°lise detalhada
async function fetchSpecificService(apiKey, apiUrl, serviceId) {
  try {
    const response = await fetch(apiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        key: apiKey,
        action: 'services'
      })
    });

    const services = await response.json();
    return services.find(s => s.service === serviceId);
  } catch (error) {
    console.error('‚ùå Erro ao buscar servi√ßo espec√≠fico:', error.message);
    return null;
  }
}

// Fun√ß√£o avan√ßada para extrair TODAS as informa√ß√µes
function extractAllServiceInfo(apiService) {
  const info = {
    // Informa√ß√µes b√°sicas da API
    originalName: apiService.name,
    originalDescription: apiService.description || '',
    category: apiService.category,
    rate: apiService.rate,
    min: apiService.min,
    max: apiService.max,
    type: apiService.type,
    refill: apiService.refill,
    cancel: apiService.cancel,
    dripfeed: apiService.dripfeed,
    
    // Informa√ß√µes extra√≠das da descri√ß√£o
    extracted: {
      geo: null,
      startTime: null,
      minMax: null,
      linkExample: null,
      warnings: [],
      qualityTier: null,
      qualityDescription: null,
      speed: null,
      features: [],
      requirements: []
    }
  };

  const fullText = `${apiService.name} ${apiService.description || ''}`;

  // 1. Extrair Geo/Localiza√ß√£o
  const geoPatterns = [
    /üåé\s*Geo:\s*([^\n\r]+)/gi,
    /üåç\s*Geo:\s*([^\n\r]+)/gi,
    /üåê\s*Geo:\s*([^\n\r]+)/gi,
    /Geo:\s*([^\n\r]+)/gi
  ];
  
  geoPatterns.forEach(pattern => {
    const match = fullText.match(pattern);
    if (match && !info.extracted.geo) {
      info.extracted.geo = match[1].trim();
    }
  });

  // 2. Extrair Start Time/Tempo de In√≠cio
  const startTimePatterns = [
    /‚åöÔ∏è?\s*(?:Start Time|Hor√°rio de In√≠cio):\s*([^\n\r]+)/gi,
    /‚è∞\s*(?:Start Time|Hor√°rio de In√≠cio):\s*([^\n\r]+)/gi,
    /Start Time:\s*([^\n\r]+)/gi,
    /Hor√°rio de In√≠cio:\s*([^\n\r]+)/gi
  ];

  startTimePatterns.forEach(pattern => {
    const match = fullText.match(pattern);
    if (match && !info.extracted.startTime) {
      info.extracted.startTime = match[1].trim();
    }
  });

  // 3. Extrair Min-Max detalhado
  const minMaxPatterns = [
    /üîº\s*(?:Min|M√≠n)\s*-\s*(?:Max|M√°x)\.?:\s*([^\n\r]+)/gi,
    /üìä\s*(?:Min|M√≠n)\s*-\s*(?:Max|M√°x)\.?:\s*([^\n\r]+)/gi,
    /(?:Min|M√≠n)\s*-\s*(?:Max|M√°x)\.?:\s*([^\n\r]+)/gi
  ];

  minMaxPatterns.forEach(pattern => {
    const match = fullText.match(pattern);
    if (match && !info.extracted.minMax) {
      info.extracted.minMax = match[1].trim();
    }
  });

  // 4. Extrair velocidade/speed
  const speedPatterns = [
    /(?:Speed|Velocidade):\s*([^\n\r|]+)/gi,
    /(\d+(?:-\d+)?(?:K|k)?\/(?:Day|Dia|Daily))/gi,
    /(\d+(?:-\d+)?\s*(?:K|k)?\s*(?:por|per)\s*(?:dia|day))/gi,
    /(\d+(?:-\d+)?(?:K|k)?\s*Daily)/gi
  ];

  speedPatterns.forEach(pattern => {
    const matches = fullText.match(pattern);
    if (matches && !info.extracted.speed) {
      info.extracted.speed = matches[0].trim();
    }
  });

  // 5. Extrair exemplo de link
  const linkPatterns = [
    /üç∫?\s*(?:Link Example|Exemplo de Link):\s*(https?:\/\/[^\s\n\r]+)/gi,
    /üîó\s*(?:Link Example|Exemplo de Link):\s*(https?:\/\/[^\s\n\r]+)/gi,
    /(?:Link Example|Exemplo de Link):\s*(https?:\/\/[^\s\n\r]+)/gi
  ];

  linkPatterns.forEach(pattern => {
    const match = fullText.match(pattern);
    if (match && !info.extracted.linkExample) {
      info.extracted.linkExample = match[1].trim();
    }
  });

  // 6. Extrair avisos e requirements
  const warningPatterns = [
    /‚ö†Ô∏è\s*([^\n\r]+)/g,
    /üö®\s*([^\n\r]+)/g,
    /‚ùó\s*([^\n\r]+)/g,
    /‚õî\s*([^\n\r]+)/g
  ];

  warningPatterns.forEach(pattern => {
    let match;
    while ((match = pattern.exec(fullText)) !== null) {
      const warning = match[1].trim();
      if (warning && !info.extracted.warnings.includes(warning)) {
        info.extracted.warnings.push(warning);
      }
    }
  });

  // 7. Extrair tier de qualidade e descri√ß√£o
  const qualityTiers = {
    'üü¢': 'M√âDIO',
    'üü°': 'B√ÅSICO', 
    'üîµ': 'PREMIUM',
    'üü†': 'ALTO',
    'üî¥': 'M√ÅXIMO',
    '‚ö´': 'ESPECIAL'
  };

  for (const [emoji, tier] of Object.entries(qualityTiers)) {
    if (fullText.includes(emoji)) {
      info.extracted.qualityTier = tier;
      
      // Extrair descri√ß√£o da qualidade
      const tierPattern = new RegExp(`${emoji}\\s*${tier}:?\\s*([^üü¢üü°üîµüü†üî¥‚ö´]+)`, 'i');
      const tierMatch = fullText.match(tierPattern);
      if (tierMatch) {
        info.extracted.qualityDescription = tierMatch[1].trim().replace(/\n+/g, ' ').substring(0, 300);
      }
      break;
    }
  }

  // 8. Extrair caracter√≠sticas especiais
  const featurePatterns = [
    /‚úÖ\s*([^\n\r]+)/g,
    /üéØ\s*([^\n\r]+)/g,
    /üíé\s*([^\n\r]+)/g,
    /‚≠ê\s*([^\n\r]+)/g
  ];

  featurePatterns.forEach(pattern => {
    let match;
    while ((match = pattern.exec(fullText)) !== null) {
      const feature = match[1].trim();
      if (feature && !info.extracted.features.includes(feature)) {
        info.extracted.features.push(feature);
      }
    }
  });

  return info;
}

// Fun√ß√£o para gerar descri√ß√£o completa em portugu√™s
function generateCompleteDescription(serviceInfo, dbService) {
  let description = '';

  // Cabe√ßalho
  const platform = dbService.category.split(' - ')[0];
  const serviceType = dbService.category.split(' - ')[1];
  
  description += `üéØ **${serviceType} para ${platform}**\n\n`;

  // Informa√ß√µes b√°sicas
  description += `üìä **Informa√ß√µes do Servi√ßo:**\n`;
  description += `‚Ä¢ **Quantidade:** ${dbService.min_quantity.toLocaleString('pt-BR')} - ${dbService.max_quantity.toLocaleString('pt-BR')} unidades\n`;
  
  if (serviceInfo.extracted.speed) {
    const speedPt = serviceInfo.extracted.speed
      .replace(/Day|Daily/gi, 'por dia')
      .replace(/K/gi, 'mil');
    description += `‚Ä¢ **Velocidade:** ${speedPt}\n`;
  }

  if (serviceInfo.extracted.startTime) {
    const startTimePt = serviceInfo.extracted.startTime
      .replace(/h/g, ' horas')
      .replace(/-/g, ' a ');
    description += `‚Ä¢ **Tempo de in√≠cio:** ${startTimePt}\n`;
  }

  if (serviceInfo.extracted.geo) {
    const geoPt = serviceInfo.extracted.geo === 'Global' ? 'Mundial' : serviceInfo.extracted.geo;
    description += `‚Ä¢ **Localiza√ß√£o:** ${geoPt}\n`;
  }

  // Tipo de servi√ßo
  description += `‚Ä¢ **Tipo:** ${serviceInfo.type === 'Default' ? 'Padr√£o' : serviceInfo.type}\n`;

  // Garantias e recursos
  description += `\nüõ°Ô∏è **Garantias e Recursos:**\n`;
  
  // Analisar garantias pelo nome
  if (dbService.name.includes('Garantia Vital√≠cia')) {
    description += `‚Ä¢ ‚úÖ **Garantia vital√≠cia** - Reposi√ß√£o permanente\n`;
  } else if (dbService.name.includes('Reposi√ß√£o 30 Dias')) {
    description += `‚Ä¢ ‚úÖ **Reposi√ß√£o de 30 dias** - Prote√ß√£o tempor√°ria\n`;
  } else if (dbService.name.includes('Sem Reposi√ß√£o')) {
    description += `‚Ä¢ ‚ùå **Sem reposi√ß√£o** - Pre√ßo mais baixo\n`;
  }

  if (serviceInfo.refill) {
    description += `‚Ä¢ ‚úÖ **Reposi√ß√£o autom√°tica** dispon√≠vel\n`;
  }

  if (serviceInfo.cancel) {
    description += `‚Ä¢ ‚úÖ **Cancelamento** permitido\n`;
  }

  if (serviceInfo.dripfeed) {
    description += `‚Ä¢ ‚úÖ **Entrega gradual** (drip-feed) dispon√≠vel\n`;
  }

  // Caracter√≠sticas especiais
  if (dbService.name.includes('Reais')) {
    description += `‚Ä¢ üë• **Perfis reais** e ativos\n`;
  }

  if (dbService.name.includes('High Retention')) {
    description += `‚Ä¢ üìà **Alta reten√ß√£o** - Visualiza√ß√µes completas\n`;
  }

  if (dbService.name.includes('Instant√¢neo')) {
    description += `‚Ä¢ ‚ö° **In√≠cio instant√¢neo**\n`;
  }

  // Qualidade do servi√ßo
  if (serviceInfo.extracted.qualityTier) {
    description += `\n‚≠ê **N√≠vel de Qualidade: ${serviceInfo.extracted.qualityTier}**\n`;
    if (serviceInfo.extracted.qualityDescription) {
      description += `${serviceInfo.extracted.qualityDescription}\n`;
    }
  }

  // Caracter√≠sticas extras
  if (serviceInfo.extracted.features.length > 0) {
    description += `\nüéØ **Caracter√≠sticas Especiais:**\n`;
    serviceInfo.extracted.features.slice(0, 3).forEach(feature => {
      description += `‚Ä¢ ${feature}\n`;
    });
  }

  // Avisos importantes
  if (serviceInfo.extracted.warnings.length > 0) {
    description += `\n‚ö†Ô∏è **Avisos Importantes:**\n`;
    serviceInfo.extracted.warnings.forEach(warning => {
      const warningPt = warning
        .replace(/profile must be set to "public"/gi, 'perfil deve estar p√∫blico')
        .replace(/order will not start/gi, 'pedido n√£o iniciar√°')
        .replace(/after completion/gi, 'ap√≥s conclus√£o')
        .replace(/you can close it again/gi, 'pode fechar novamente');
      description += `‚Ä¢ ${warningPt}\n`;
    });
  }

  // Exemplo de link
  if (serviceInfo.extracted.linkExample) {
    description += `\nüîó **Exemplo de link:** ${serviceInfo.extracted.linkExample}\n`;
  }

  // Informa√ß√µes de pre√ßo
  const providerCostBRL = parseFloat(dbService.provider_rate) * 5.41; // Taxa de c√¢mbio atual
  const profit = parseFloat(dbService.rate) - providerCostBRL;
  const profitPercentage = ((profit / providerCostBRL) * 100).toFixed(1);

  description += `\nüí∞ **Informa√ß√µes de Pre√ßo:**\n`;
  description += `‚Ä¢ **Pre√ßo final:** R$ ${parseFloat(dbService.rate).toFixed(4)} por 1000 unidades\n`;
  description += `‚Ä¢ **Margem de lucro:** ${profitPercentage}% (R$ ${profit.toFixed(4)})\n`;

  return description.trim();
}

// Fun√ß√£o principal
async function extractFullServiceDetails() {
  console.log('üîç EXTRAINDO INFORMA√á√ïES COMPLETAS DOS SERVI√áOS');
  console.log('='.repeat(60));

  // Buscar chaves da API
  const { data: apiKeys } = await supabase.from('api_keys').select('*').eq('is_active', true);
  const mtpConfig = apiKeys?.find(key => key.provider === 'mtp');
  
  if (!mtpConfig) {
    console.log('‚ùå Configura√ß√£o da API MTP n√£o encontrada');
    return;
  }

  // Buscar alguns servi√ßos espec√≠ficos para an√°lise detalhada
  const { data: dbServices } = await supabase
    .from('services')
    .select('*')
    .limit(3); // Analisar apenas 3 para demonstra√ß√£o

  console.log(`\nüìã Analisando ${dbServices.length} servi√ßos em detalhes...\n`);

  for (const dbService of dbServices) {
    console.log(`üîç ANALISANDO: ${dbService.name}`);
    console.log('='.repeat(80));

    // Buscar dados completos da API
    const apiService = await fetchSpecificService(
      mtpConfig.api_key, 
      mtpConfig.api_url, 
      dbService.provider_service_id
    );

    if (!apiService) {
      console.log('‚ùå Servi√ßo n√£o encontrado na API\n');
      continue;
    }

    // Extrair todas as informa√ß√µes
    const serviceInfo = extractAllServiceInfo(apiService);

    // Mostrar informa√ß√µes extra√≠das
    console.log('\nüìä DADOS DA API:');
    console.log(`Nome original: ${serviceInfo.originalName}`);
    console.log(`Categoria: ${serviceInfo.category}`);
    console.log(`Rate: $${serviceInfo.rate}`);
    console.log(`Min-Max: ${serviceInfo.min} - ${serviceInfo.max}`);
    console.log(`Type: ${serviceInfo.type}`);
    console.log(`Refill: ${serviceInfo.refill}`);
    console.log(`Cancel: ${serviceInfo.cancel}`);
    console.log(`Dripfeed: ${serviceInfo.dripfeed}`);

    console.log('\nüîç INFORMA√á√ïES EXTRA√çDAS:');
    console.log(`Geo: ${serviceInfo.extracted.geo || 'N/A'}`);
    console.log(`Start Time: ${serviceInfo.extracted.startTime || 'N/A'}`);
    console.log(`Speed: ${serviceInfo.extracted.speed || 'N/A'}`);
    console.log(`Min-Max detalhado: ${serviceInfo.extracted.minMax || 'N/A'}`);
    console.log(`Quality Tier: ${serviceInfo.extracted.qualityTier || 'N/A'}`);
    console.log(`Link Example: ${serviceInfo.extracted.linkExample || 'N/A'}`);
    console.log(`Warnings: ${serviceInfo.extracted.warnings.length}`);
    console.log(`Features: ${serviceInfo.extracted.features.length}`);

    if (serviceInfo.extracted.warnings.length > 0) {
      console.log('\n‚ö†Ô∏è AVISOS:');
      serviceInfo.extracted.warnings.forEach(warning => {
        console.log(`   ‚Ä¢ ${warning}`);
      });
    }

    // Gerar e mostrar nova descri√ß√£o
    const completeDescription = generateCompleteDescription(serviceInfo, dbService);
    
    console.log('\nüìù DESCRI√á√ÉO COMPLETA GERADA:');
    console.log('-'.repeat(60));
    console.log(completeDescription);
    console.log('-'.repeat(60));

    // Atualizar no banco
    const { error } = await supabase
      .from('services')
      .update({
        description: completeDescription,
        updated_at: new Date().toISOString()
      })
      .eq('id', dbService.id);

    if (error) {
      console.error('‚ùå Erro ao atualizar:', error);
    } else {
      console.log('‚úÖ Descri√ß√£o atualizada no banco!');
    }

    console.log('\n' + '='.repeat(80) + '\n');
  }

  console.log('‚úÖ An√°lise completa finalizada!');
}

// Executar
if (require.main === module) {
  extractFullServiceDetails().catch(console.error);
}

module.exports = { extractAllServiceInfo, generateCompleteDescription };
